// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stt.proto

#include "stt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_stt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSTT_stt_2eproto;
namespace SpeechToText {
class ConfigSTTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSTT> _instance;
} _ConfigSTT_default_instance_;
class ConfigResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigResult> _instance;
} _ConfigResult_default_instance_;
class SpeechChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechChunk> _instance;
} _SpeechChunk_default_instance_;
class TranscriptChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranscriptChunk> _instance;
} _TranscriptChunk_default_instance_;
}  // namespace SpeechToText
static void InitDefaultsConfigSTT_stt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpeechToText::_ConfigSTT_default_instance_;
    new (ptr) ::SpeechToText::ConfigSTT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpeechToText::ConfigSTT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSTT_stt_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSTT_stt_2eproto}, {}};

static void InitDefaultsConfigResult_stt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpeechToText::_ConfigResult_default_instance_;
    new (ptr) ::SpeechToText::ConfigResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpeechToText::ConfigResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigResult_stt_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigResult_stt_2eproto}, {
      &scc_info_ConfigSTT_stt_2eproto.base,}};

static void InitDefaultsSpeechChunk_stt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpeechToText::_SpeechChunk_default_instance_;
    new (ptr) ::SpeechToText::SpeechChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpeechToText::SpeechChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeechChunk_stt_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeechChunk_stt_2eproto}, {
      &scc_info_ConfigSTT_stt_2eproto.base,}};

static void InitDefaultsTranscriptChunk_stt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpeechToText::_TranscriptChunk_default_instance_;
    new (ptr) ::SpeechToText::TranscriptChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpeechToText::TranscriptChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TranscriptChunk_stt_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTranscriptChunk_stt_2eproto}, {}};

void InitDefaults_stt_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSTT_stt_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigResult_stt_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechChunk_stt_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranscriptChunk_stt_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_stt_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_stt_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_stt_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_stt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, asrs_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, encoding_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, sampling_rate_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, language_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, max_alternatives_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, profanity_filter_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, interim_results_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, continuous_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, chunksize_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigSTT, inactivity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigResult, status_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::ConfigResult, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::SpeechChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::SpeechChunk, content_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::SpeechChunk, token_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::SpeechChunk, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::TranscriptChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpeechToText::TranscriptChunk, asr_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::TranscriptChunk, transcript_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::TranscriptChunk, is_final_),
  PROTOBUF_FIELD_OFFSET(::SpeechToText::TranscriptChunk, confidence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SpeechToText::ConfigSTT)},
  { 15, -1, sizeof(::SpeechToText::ConfigResult)},
  { 22, -1, sizeof(::SpeechToText::SpeechChunk)},
  { 30, -1, sizeof(::SpeechToText::TranscriptChunk)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SpeechToText::_ConfigSTT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SpeechToText::_ConfigResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SpeechToText::_SpeechChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SpeechToText::_TranscriptChunk_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_stt_2eproto = {
  {}, AddDescriptors_stt_2eproto, "stt.proto", schemas,
  file_default_instances, TableStruct_stt_2eproto::offsets,
  file_level_metadata_stt_2eproto, 4, file_level_enum_descriptors_stt_2eproto, file_level_service_descriptors_stt_2eproto,
};

const char descriptor_table_protodef_stt_2eproto[] =
  "\n\tstt.proto\022\014SpeechToText\"\334\001\n\tConfigSTT\022"
  "\014\n\004asrs\030\001 \003(\t\022\020\n\010encoding\030\002 \001(\t\022\025\n\rsampl"
  "ing_rate\030\003 \001(\005\022\020\n\010language\030\004 \001(\t\022\030\n\020max_"
  "alternatives\030\005 \001(\005\022\030\n\020profanity_filter\030\006"
  " \001(\010\022\027\n\017interim_results\030\007 \001(\010\022\022\n\ncontinu"
  "ous\030\010 \001(\010\022\021\n\tchunksize\030\t \001(\005\022\022\n\ninactivi"
  "ty\030\n \001(\005\"G\n\014ConfigResult\022\016\n\006status\030\001 \001(\010"
  "\022\'\n\006config\030\002 \001(\0132\027.SpeechToText.ConfigST"
  "T\"V\n\013SpeechChunk\022\017\n\007content\030\001 \001(\014\022\r\n\005tok"
  "en\030\002 \001(\t\022\'\n\006config\030\003 \001(\0132\027.SpeechToText."
  "ConfigSTT\"X\n\017TranscriptChunk\022\013\n\003asr\030\001 \001("
  "\t\022\022\n\ntranscript\030\002 \001(\t\022\020\n\010is_final\030\003 \001(\010\022"
  "\022\n\nconfidence\030\004 \001(\0022\237\001\n\010Listener\022A\n\010DoCo"
  "nfig\022\027.SpeechToText.ConfigSTT\032\032.SpeechTo"
  "Text.ConfigResult\"\000\022P\n\016DoSpeechToText\022\031."
  "SpeechToText.SpeechChunk\032\035.SpeechToText."
  "TranscriptChunk\"\000(\0010\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_stt_2eproto = {
  false, InitDefaults_stt_2eproto, 
  descriptor_table_protodef_stt_2eproto,
  "stt.proto", &assign_descriptors_table_stt_2eproto, 669,
};

void AddDescriptors_stt_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_stt_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stt_2eproto = []() { AddDescriptors_stt_2eproto(); return true; }();
namespace SpeechToText {

// ===================================================================

void ConfigSTT::InitAsDefaultInstance() {
}
class ConfigSTT::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSTT::kAsrsFieldNumber;
const int ConfigSTT::kEncodingFieldNumber;
const int ConfigSTT::kSamplingRateFieldNumber;
const int ConfigSTT::kLanguageFieldNumber;
const int ConfigSTT::kMaxAlternativesFieldNumber;
const int ConfigSTT::kProfanityFilterFieldNumber;
const int ConfigSTT::kInterimResultsFieldNumber;
const int ConfigSTT::kContinuousFieldNumber;
const int ConfigSTT::kChunksizeFieldNumber;
const int ConfigSTT::kInactivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSTT::ConfigSTT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpeechToText.ConfigSTT)
}
ConfigSTT::ConfigSTT(const ConfigSTT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      asrs_(from.asrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encoding().size() > 0) {
    encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  ::memcpy(&sampling_rate_, &from.sampling_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&inactivity_) -
    reinterpret_cast<char*>(&sampling_rate_)) + sizeof(inactivity_));
  // @@protoc_insertion_point(copy_constructor:SpeechToText.ConfigSTT)
}

void ConfigSTT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConfigSTT_stt_2eproto.base);
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inactivity_) -
      reinterpret_cast<char*>(&sampling_rate_)) + sizeof(inactivity_));
}

ConfigSTT::~ConfigSTT() {
  // @@protoc_insertion_point(destructor:SpeechToText.ConfigSTT)
  SharedDtor();
}

void ConfigSTT::SharedDtor() {
  encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSTT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigSTT& ConfigSTT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConfigSTT_stt_2eproto.base);
  return *internal_default_instance();
}


void ConfigSTT::Clear() {
// @@protoc_insertion_point(message_clear_start:SpeechToText.ConfigSTT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asrs_.Clear();
  encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inactivity_) -
      reinterpret_cast<char*>(&sampling_rate_)) + sizeof(inactivity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigSTT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConfigSTT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string asrs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("SpeechToText.ConfigSTT.asrs");
          object = msg->add_asrs();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string encoding = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SpeechToText.ConfigSTT.encoding");
        object = msg->mutable_encoding();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 sampling_rate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sampling_rate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string language = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SpeechToText.ConfigSTT.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 max_alternatives = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_alternatives(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool profanity_filter = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_profanity_filter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool interim_results = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_interim_results(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool continuous = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_continuous(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 chunksize = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_chunksize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 inactivity = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_inactivity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigSTT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpeechToText.ConfigSTT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string asrs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_asrs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asrs(this->asrs_size() - 1).data(),
            static_cast<int>(this->asrs(this->asrs_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeechToText.ConfigSTT.asrs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoding()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encoding().data(), static_cast<int>(this->encoding().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeechToText.ConfigSTT.encoding"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sampling_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampling_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeechToText.ConfigSTT.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool profanity_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &profanity_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool interim_results = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interim_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool continuous = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chunksize = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inactivity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inactivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpeechToText.ConfigSTT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpeechToText.ConfigSTT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigSTT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpeechToText.ConfigSTT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string asrs = 1;
  for (int i = 0, n = this->asrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asrs(i).data(), static_cast<int>(this->asrs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.ConfigSTT.asrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->asrs(i), output);
  }

  // string encoding = 2;
  if (this->encoding().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encoding().data(), static_cast<int>(this->encoding().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.ConfigSTT.encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->encoding(), output);
  }

  // int32 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sampling_rate(), output);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.ConfigSTT.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language(), output);
  }

  // int32 max_alternatives = 5;
  if (this->max_alternatives() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_alternatives(), output);
  }

  // bool profanity_filter = 6;
  if (this->profanity_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->profanity_filter(), output);
  }

  // bool interim_results = 7;
  if (this->interim_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->interim_results(), output);
  }

  // bool continuous = 8;
  if (this->continuous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->continuous(), output);
  }

  // int32 chunksize = 9;
  if (this->chunksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->chunksize(), output);
  }

  // int32 inactivity = 10;
  if (this->inactivity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->inactivity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpeechToText.ConfigSTT)
}

::google::protobuf::uint8* ConfigSTT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpeechToText.ConfigSTT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string asrs = 1;
  for (int i = 0, n = this->asrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asrs(i).data(), static_cast<int>(this->asrs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.ConfigSTT.asrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->asrs(i), target);
  }

  // string encoding = 2;
  if (this->encoding().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encoding().data(), static_cast<int>(this->encoding().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.ConfigSTT.encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->encoding(), target);
  }

  // int32 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sampling_rate(), target);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.ConfigSTT.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language(), target);
  }

  // int32 max_alternatives = 5;
  if (this->max_alternatives() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_alternatives(), target);
  }

  // bool profanity_filter = 6;
  if (this->profanity_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->profanity_filter(), target);
  }

  // bool interim_results = 7;
  if (this->interim_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->interim_results(), target);
  }

  // bool continuous = 8;
  if (this->continuous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->continuous(), target);
  }

  // int32 chunksize = 9;
  if (this->chunksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->chunksize(), target);
  }

  // int32 inactivity = 10;
  if (this->inactivity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->inactivity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpeechToText.ConfigSTT)
  return target;
}

size_t ConfigSTT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpeechToText.ConfigSTT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string asrs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->asrs_size());
  for (int i = 0, n = this->asrs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->asrs(i));
  }

  // string encoding = 2;
  if (this->encoding().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encoding());
  }

  // string language = 4;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // int32 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sampling_rate());
  }

  // int32 max_alternatives = 5;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // bool profanity_filter = 6;
  if (this->profanity_filter() != 0) {
    total_size += 1 + 1;
  }

  // bool interim_results = 7;
  if (this->interim_results() != 0) {
    total_size += 1 + 1;
  }

  // bool continuous = 8;
  if (this->continuous() != 0) {
    total_size += 1 + 1;
  }

  // int32 chunksize = 9;
  if (this->chunksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chunksize());
  }

  // int32 inactivity = 10;
  if (this->inactivity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inactivity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSTT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpeechToText.ConfigSTT)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSTT* source =
      ::google::protobuf::DynamicCastToGenerated<ConfigSTT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpeechToText.ConfigSTT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpeechToText.ConfigSTT)
    MergeFrom(*source);
  }
}

void ConfigSTT::MergeFrom(const ConfigSTT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpeechToText.ConfigSTT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  asrs_.MergeFrom(from.asrs_);
  if (from.encoding().size() > 0) {

    encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.sampling_rate() != 0) {
    set_sampling_rate(from.sampling_rate());
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (from.profanity_filter() != 0) {
    set_profanity_filter(from.profanity_filter());
  }
  if (from.interim_results() != 0) {
    set_interim_results(from.interim_results());
  }
  if (from.continuous() != 0) {
    set_continuous(from.continuous());
  }
  if (from.chunksize() != 0) {
    set_chunksize(from.chunksize());
  }
  if (from.inactivity() != 0) {
    set_inactivity(from.inactivity());
  }
}

void ConfigSTT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpeechToText.ConfigSTT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSTT::CopyFrom(const ConfigSTT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpeechToText.ConfigSTT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSTT::IsInitialized() const {
  return true;
}

void ConfigSTT::Swap(ConfigSTT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigSTT::InternalSwap(ConfigSTT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  asrs_.InternalSwap(CastToBase(&other->asrs_));
  encoding_.Swap(&other->encoding_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sampling_rate_, other->sampling_rate_);
  swap(max_alternatives_, other->max_alternatives_);
  swap(profanity_filter_, other->profanity_filter_);
  swap(interim_results_, other->interim_results_);
  swap(continuous_, other->continuous_);
  swap(chunksize_, other->chunksize_);
  swap(inactivity_, other->inactivity_);
}

::google::protobuf::Metadata ConfigSTT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_stt_2eproto);
  return ::file_level_metadata_stt_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConfigResult::InitAsDefaultInstance() {
  ::SpeechToText::_ConfigResult_default_instance_._instance.get_mutable()->config_ = const_cast< ::SpeechToText::ConfigSTT*>(
      ::SpeechToText::ConfigSTT::internal_default_instance());
}
class ConfigResult::HasBitSetters {
 public:
  static const ::SpeechToText::ConfigSTT& config(const ConfigResult* msg);
};

const ::SpeechToText::ConfigSTT&
ConfigResult::HasBitSetters::config(const ConfigResult* msg) {
  return *msg->config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigResult::kStatusFieldNumber;
const int ConfigResult::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigResult::ConfigResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpeechToText.ConfigResult)
}
ConfigResult::ConfigResult(const ConfigResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::SpeechToText::ConfigSTT(*from.config_);
  } else {
    config_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:SpeechToText.ConfigResult)
}

void ConfigResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConfigResult_stt_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&config_)) + sizeof(status_));
}

ConfigResult::~ConfigResult() {
  // @@protoc_insertion_point(destructor:SpeechToText.ConfigResult)
  SharedDtor();
}

void ConfigResult::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
}

void ConfigResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigResult& ConfigResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConfigResult_stt_2eproto.base);
  return *internal_default_instance();
}


void ConfigResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SpeechToText.ConfigResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConfigResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .SpeechToText.ConfigSTT config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::SpeechToText::ConfigSTT::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpeechToText.ConfigResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpeechToText.ConfigSTT config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpeechToText.ConfigResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpeechToText.ConfigResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpeechToText.ConfigResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // .SpeechToText.ConfigSTT config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpeechToText.ConfigResult)
}

::google::protobuf::uint8* ConfigResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpeechToText.ConfigResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // .SpeechToText.ConfigSTT config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpeechToText.ConfigResult)
  return target;
}

size_t ConfigResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpeechToText.ConfigResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SpeechToText.ConfigSTT config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpeechToText.ConfigResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigResult* source =
      ::google::protobuf::DynamicCastToGenerated<ConfigResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpeechToText.ConfigResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpeechToText.ConfigResult)
    MergeFrom(*source);
  }
}

void ConfigResult::MergeFrom(const ConfigResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpeechToText.ConfigResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::SpeechToText::ConfigSTT::MergeFrom(from.config());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConfigResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpeechToText.ConfigResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigResult::CopyFrom(const ConfigResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpeechToText.ConfigResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigResult::IsInitialized() const {
  return true;
}

void ConfigResult::Swap(ConfigResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigResult::InternalSwap(ConfigResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata ConfigResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_stt_2eproto);
  return ::file_level_metadata_stt_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeechChunk::InitAsDefaultInstance() {
  ::SpeechToText::_SpeechChunk_default_instance_._instance.get_mutable()->config_ = const_cast< ::SpeechToText::ConfigSTT*>(
      ::SpeechToText::ConfigSTT::internal_default_instance());
}
class SpeechChunk::HasBitSetters {
 public:
  static const ::SpeechToText::ConfigSTT& config(const SpeechChunk* msg);
};

const ::SpeechToText::ConfigSTT&
SpeechChunk::HasBitSetters::config(const SpeechChunk* msg) {
  return *msg->config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechChunk::kContentFieldNumber;
const int SpeechChunk::kTokenFieldNumber;
const int SpeechChunk::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechChunk::SpeechChunk()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpeechToText.SpeechChunk)
}
SpeechChunk::SpeechChunk(const SpeechChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_config()) {
    config_ = new ::SpeechToText::ConfigSTT(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpeechToText.SpeechChunk)
}

void SpeechChunk::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SpeechChunk_stt_2eproto.base);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

SpeechChunk::~SpeechChunk() {
  // @@protoc_insertion_point(destructor:SpeechToText.SpeechChunk)
  SharedDtor();
}

void SpeechChunk::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void SpeechChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeechChunk& SpeechChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeechChunk_stt_2eproto.base);
  return *internal_default_instance();
}


void SpeechChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:SpeechToText.SpeechChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeechChunk::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeechChunk*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SpeechToText.SpeechChunk.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .SpeechToText.ConfigSTT config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::SpeechToText::ConfigSTT::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeechChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpeechToText.SpeechChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeechToText.SpeechChunk.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpeechToText.ConfigSTT config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpeechToText.SpeechChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpeechToText.SpeechChunk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeechChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpeechToText.SpeechChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.SpeechChunk.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // .SpeechToText.ConfigSTT config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpeechToText.SpeechChunk)
}

::google::protobuf::uint8* SpeechChunk::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpeechToText.SpeechChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.SpeechChunk.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // .SpeechToText.ConfigSTT config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpeechToText.SpeechChunk)
  return target;
}

size_t SpeechChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpeechToText.SpeechChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .SpeechToText.ConfigSTT config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpeechToText.SpeechChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechChunk* source =
      ::google::protobuf::DynamicCastToGenerated<SpeechChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpeechToText.SpeechChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpeechToText.SpeechChunk)
    MergeFrom(*source);
  }
}

void SpeechChunk::MergeFrom(const SpeechChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpeechToText.SpeechChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_config()) {
    mutable_config()->::SpeechToText::ConfigSTT::MergeFrom(from.config());
  }
}

void SpeechChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpeechToText.SpeechChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechChunk::CopyFrom(const SpeechChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpeechToText.SpeechChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechChunk::IsInitialized() const {
  return true;
}

void SpeechChunk::Swap(SpeechChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechChunk::InternalSwap(SpeechChunk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
}

::google::protobuf::Metadata SpeechChunk::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_stt_2eproto);
  return ::file_level_metadata_stt_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TranscriptChunk::InitAsDefaultInstance() {
}
class TranscriptChunk::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscriptChunk::kAsrFieldNumber;
const int TranscriptChunk::kTranscriptFieldNumber;
const int TranscriptChunk::kIsFinalFieldNumber;
const int TranscriptChunk::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscriptChunk::TranscriptChunk()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpeechToText.TranscriptChunk)
}
TranscriptChunk::TranscriptChunk(const TranscriptChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asr().size() > 0) {
    asr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asr_);
  }
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:SpeechToText.TranscriptChunk)
}

void TranscriptChunk::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TranscriptChunk_stt_2eproto.base);
  asr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(confidence_));
}

TranscriptChunk::~TranscriptChunk() {
  // @@protoc_insertion_point(destructor:SpeechToText.TranscriptChunk)
  SharedDtor();
}

void TranscriptChunk::SharedDtor() {
  asr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transcript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TranscriptChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranscriptChunk& TranscriptChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TranscriptChunk_stt_2eproto.base);
  return *internal_default_instance();
}


void TranscriptChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:SpeechToText.TranscriptChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranscriptChunk::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TranscriptChunk*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string asr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SpeechToText.TranscriptChunk.asr");
        object = msg->mutable_asr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string transcript = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SpeechToText.TranscriptChunk.transcript");
        object = msg->mutable_transcript();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_final = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_final(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float confidence = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_confidence(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranscriptChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpeechToText.TranscriptChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string asr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asr().data(), static_cast<int>(this->asr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeechToText.TranscriptChunk.asr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transcript = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpeechToText.TranscriptChunk.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpeechToText.TranscriptChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpeechToText.TranscriptChunk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranscriptChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpeechToText.TranscriptChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asr = 1;
  if (this->asr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asr().data(), static_cast<int>(this->asr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.TranscriptChunk.asr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->asr(), output);
  }

  // string transcript = 2;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.TranscriptChunk.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transcript(), output);
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_final(), output);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpeechToText.TranscriptChunk)
}

::google::protobuf::uint8* TranscriptChunk::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpeechToText.TranscriptChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asr = 1;
  if (this->asr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asr().data(), static_cast<int>(this->asr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.TranscriptChunk.asr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->asr(), target);
  }

  // string transcript = 2;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpeechToText.TranscriptChunk.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transcript(), target);
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_final(), target);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpeechToText.TranscriptChunk)
  return target;
}

size_t TranscriptChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpeechToText.TranscriptChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asr = 1;
  if (this->asr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asr());
  }

  // string transcript = 2;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranscriptChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpeechToText.TranscriptChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const TranscriptChunk* source =
      ::google::protobuf::DynamicCastToGenerated<TranscriptChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpeechToText.TranscriptChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpeechToText.TranscriptChunk)
    MergeFrom(*source);
  }
}

void TranscriptChunk::MergeFrom(const TranscriptChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpeechToText.TranscriptChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asr().size() > 0) {

    asr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asr_);
  }
  if (from.transcript().size() > 0) {

    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void TranscriptChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpeechToText.TranscriptChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscriptChunk::CopyFrom(const TranscriptChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpeechToText.TranscriptChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptChunk::IsInitialized() const {
  return true;
}

void TranscriptChunk::Swap(TranscriptChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranscriptChunk::InternalSwap(TranscriptChunk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  asr_.Swap(&other->asr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transcript_.Swap(&other->transcript_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_final_, other->is_final_);
  swap(confidence_, other->confidence_);
}

::google::protobuf::Metadata TranscriptChunk::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_stt_2eproto);
  return ::file_level_metadata_stt_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SpeechToText
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::SpeechToText::ConfigSTT* Arena::CreateMaybeMessage< ::SpeechToText::ConfigSTT >(Arena* arena) {
  return Arena::CreateInternal< ::SpeechToText::ConfigSTT >(arena);
}
template<> PROTOBUF_NOINLINE ::SpeechToText::ConfigResult* Arena::CreateMaybeMessage< ::SpeechToText::ConfigResult >(Arena* arena) {
  return Arena::CreateInternal< ::SpeechToText::ConfigResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SpeechToText::SpeechChunk* Arena::CreateMaybeMessage< ::SpeechToText::SpeechChunk >(Arena* arena) {
  return Arena::CreateInternal< ::SpeechToText::SpeechChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::SpeechToText::TranscriptChunk* Arena::CreateMaybeMessage< ::SpeechToText::TranscriptChunk >(Arena* arena) {
  return Arena::CreateInternal< ::SpeechToText::TranscriptChunk >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
